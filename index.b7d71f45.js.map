{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["'use strict';\nvar $a5fd07fa01589658$exports = {};\n/* eslint-disable no-console */ /* eslint-disable function-paren-newline */ 'use strict';\nclass $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        // eslint-disable-next-line no-console\n        this.state = 'idle';\n        this.score = 0;\n        this.initialState = initialState;\n    }\n    moveLeft() {\n        if (this.state !== 'idle') {\n            const moveAllNonZeroToTheLeft = this.initialState.map((row)=>$a5fd07fa01589658$var$mergeToTheLeft(row));\n            this.state = $a5fd07fa01589658$var$loseWinState(moveAllNonZeroToTheLeft);\n            this.score += $a5fd07fa01589658$var$calculateScore(this.initialState, moveAllNonZeroToTheLeft);\n            const newCellAdded = $a5fd07fa01589658$var$addNewCellRandomCell(moveAllNonZeroToTheLeft, 1);\n            this.initialState = newCellAdded;\n            return this.initialState;\n        }\n    }\n    moveRight() {\n        if (this.state !== 'idle') {\n            const moveAllNonZeroToTheRight = this.initialState.map((row)=>$a5fd07fa01589658$var$mergeToTheRight(row));\n            this.state = $a5fd07fa01589658$var$loseWinState(moveAllNonZeroToTheRight);\n            this.score += $a5fd07fa01589658$var$calculateScore(this.initialState, moveAllNonZeroToTheRight);\n            const newCellAdded = $a5fd07fa01589658$var$addNewCellRandomCell(moveAllNonZeroToTheRight, 1);\n            this.initialState = newCellAdded;\n            return this.initialState;\n        }\n    }\n    moveUp() {\n        if (this.state !== 'idle') {\n            const moveAllNonZeroToTheUp = $a5fd07fa01589658$var$mergeUp(this.initialState);\n            this.state = $a5fd07fa01589658$var$loseWinState(moveAllNonZeroToTheUp);\n            this.score += $a5fd07fa01589658$var$calculateScore(this.initialState, moveAllNonZeroToTheUp);\n            const newCellAdded = $a5fd07fa01589658$var$addNewCellRandomCell(moveAllNonZeroToTheUp, 1);\n            this.initialState = newCellAdded;\n            return this.initialState;\n        }\n    }\n    moveDown() {\n        if (this.state !== 'idle') {\n            const moveAllNonZeroToTheDown = $a5fd07fa01589658$var$mergeDown(this.initialState);\n            this.score += $a5fd07fa01589658$var$calculateScore(this.initialState, moveAllNonZeroToTheDown);\n            this.state = $a5fd07fa01589658$var$loseWinState(moveAllNonZeroToTheDown);\n            const newCellAdded = $a5fd07fa01589658$var$addNewCellRandomCell(moveAllNonZeroToTheDown, 1);\n            this.initialState = newCellAdded;\n            return this.initialState;\n        }\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.initialState;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.state;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        const allInitialDateIsZero = this.initialState.flat().every((value)=>value === 0);\n        const returnToInitialArray = allInitialDateIsZero ? $a5fd07fa01589658$var$addNewCellRandomCell(this.initialState, 2) : $a5fd07fa01589658$var$addNewCellRandomCell(this.initialState, 1);\n        this.initialState = returnToInitialArray;\n        this.score = 0;\n        this.state = 'playing';\n        return this.initialState;\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.initialState = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.score = 0;\n        this.state = 'idle';\n        return this.initialState;\n    }\n}\nfunction $a5fd07fa01589658$var$addNewCellRandomCell(initialState, qntOfRandomCellsToAdd) {\n    const flatGameInARow = initialState.flat();\n    const availableIndices = flatGameInARow.map((value, i)=>value === 0 ? i : null).filter((value)=>value !== null);\n    if (availableIndices.length === 0) return initialState;\n    for(let i = 0; i < qntOfRandomCellsToAdd; i++){\n        if (availableIndices.length === 0) break;\n        const randomIndex = Math.floor(Math.random() * availableIndices.length);\n        const indexToAdd = availableIndices.splice(randomIndex, 1)[0];\n        const randomValue = Math.random() < 0.9 ? 2 : 4;\n        flatGameInARow[indexToAdd] = randomValue;\n    }\n    const returnToInitialArray = [];\n    while(flatGameInARow.length)returnToInitialArray.push(flatGameInARow.splice(0, 4));\n    return returnToInitialArray;\n}\nfunction $a5fd07fa01589658$var$mergeToTheLeft(result) {\n    for(let i = 0; i < result.length - 1; i++)if (result[i] === result[i + 1] && result[i] !== 0) {\n        result[i] *= 2;\n        result[i + 1] = 0;\n    }\n    const filtered = result.filter((num)=>num !== 0);\n    while(filtered.length < result.length)filtered.push(0);\n    return filtered;\n}\nfunction $a5fd07fa01589658$var$mergeToTheRight(result) {\n    let nonZeroValues = result.filter((value)=>value !== 0);\n    for(let i = nonZeroValues.length - 1; i > 0; i--)if (nonZeroValues[i] === nonZeroValues[i - 1]) {\n        nonZeroValues[i] *= 2;\n        nonZeroValues[i - 1] = 0;\n    }\n    // Remove zeros again after merging\n    nonZeroValues = nonZeroValues.filter((value)=>value !== 0);\n    // Add zeros to the left to maintain the row length\n    while(nonZeroValues.length < result.length)nonZeroValues.unshift(0);\n    return nonZeroValues;\n}\nfunction $a5fd07fa01589658$var$mergeDown(initialState) {\n    const result = initialState.map((col)=>[\n            ...col\n        ]);\n    for(let col = 0; col < result[0].length; col++){\n        const column = result.map((row)=>row[col]);\n        for(let i = column.length - 1; i > 0; i--)if (column[i] === column[i - 1] && column[i] !== 0) {\n            column[i] *= 2;\n            column[i - 1] = 0;\n        }\n        const filtered = column.filter((num)=>num !== 0);\n        while(filtered.length < column.length)filtered.unshift(0);\n        for(let i = 0; i < result.length; i++)result[i][col] = filtered[i];\n    }\n    return result;\n}\nfunction $a5fd07fa01589658$var$mergeUp(initialState) {\n    const result = initialState.map((col)=>[\n            ...col\n        ]);\n    for(let col = 0; col < result[0].length; col++){\n        const column = result.map((row)=>row[col]);\n        for(let i = 0; i < column.length - 1; i++)if (column[i] === column[i + 1] && column[i] !== 0) {\n            column[i] *= 2;\n            column[i + 1] = 0;\n        }\n        const filtered = column.filter((num)=>num !== 0);\n        while(filtered.length < column.length)filtered.push(0);\n        for(let i = 0; i < result.length; i++)result[i][col] = filtered[i];\n    }\n    return result;\n}\nfunction $a5fd07fa01589658$var$checkIfWin(initialState) {\n    for(let i = 0; i < initialState.length; i++)for(let j = 0; j < initialState[i].length; j++){\n        if (initialState[i][j] === 2048) return true;\n    }\n    return false;\n}\nfunction $a5fd07fa01589658$var$checkIfLose(initialState) {\n    for(let i = 0; i < initialState.length; i++)for(let j = 0; j < initialState[i].length; j++){\n        if (initialState[i][j] === 0) return false;\n    }\n    return true;\n}\nfunction $a5fd07fa01589658$var$loseWinState(initialState) {\n    const lose = $a5fd07fa01589658$var$checkIfLose(initialState);\n    const win = $a5fd07fa01589658$var$checkIfWin(initialState);\n    if (lose) return 'lose';\n    if (win) return 'win';\n    return 'playing';\n}\nfunction $a5fd07fa01589658$var$calculateScore(initialState, finalState) {\n    let score = 0;\n    for(let i = 0; i < initialState.length; i++){\n        for(let j = 0; j < initialState[i].length; j++)if (finalState[i][j] > initialState[i][j]) score += finalState[i][j];\n    }\n    return score;\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$gameScore = document.querySelector('.game-score');\nconst $09e991522ca7e64e$var$startButton = document.querySelector('.start');\nconst $09e991522ca7e64e$var$messageWin = document.querySelector('.message-win');\nconst $09e991522ca7e64e$var$messageLose = document.querySelector('.message-lose');\nconst $09e991522ca7e64e$var$messageStart = document.querySelector('.message-start');\nconst $09e991522ca7e64e$var$fields = document.querySelectorAll('.field-cell');\ndocument.addEventListener('keydown', $09e991522ca7e64e$var$keypressHandler);\n$09e991522ca7e64e$var$startButton.addEventListener('click', $09e991522ca7e64e$var$startGame);\nfunction $09e991522ca7e64e$var$keypressHandler(e) {\n    if (e.key === 'Escape') $09e991522ca7e64e$var$restartGame();\n    if (e.key === 'Enter') $09e991522ca7e64e$var$startGame();\n    if ($09e991522ca7e64e$var$game.getStatus() === 'playing') {\n        if (e.key === 'ArrowUp') $09e991522ca7e64e$var$updateBoard($09e991522ca7e64e$var$game.moveUp());\n        if (e.key === 'ArrowDown') $09e991522ca7e64e$var$updateBoard($09e991522ca7e64e$var$game.moveDown());\n        if (e.key === 'ArrowLeft') $09e991522ca7e64e$var$updateBoard($09e991522ca7e64e$var$game.moveLeft());\n        if (e.key === 'ArrowRight') $09e991522ca7e64e$var$updateBoard($09e991522ca7e64e$var$game.moveRight());\n    } else if ($09e991522ca7e64e$var$game.getStatus() === 'win') {\n        $09e991522ca7e64e$var$messageWin.classList.remove('hidden');\n        $09e991522ca7e64e$var$startButton.classList.add('start');\n        $09e991522ca7e64e$var$startButton.classList.remove('restart');\n        $09e991522ca7e64e$var$startButton.textContent = 'Start';\n    } else if ($09e991522ca7e64e$var$game.getStatus() === 'lose') {\n        $09e991522ca7e64e$var$messageLose.classList.remove('hidden');\n        $09e991522ca7e64e$var$startButton.classList.add('start');\n        $09e991522ca7e64e$var$startButton.classList.remove('restart');\n        $09e991522ca7e64e$var$startButton.textContent = 'Start';\n    }\n}\nfunction $09e991522ca7e64e$var$updateBoard(initialState) {\n    const gameValues = initialState.flat();\n    $09e991522ca7e64e$var$fields.forEach((field, index)=>{\n        field.textContent = gameValues[index] || '';\n    });\n    const score = $09e991522ca7e64e$var$game.getScore();\n    $09e991522ca7e64e$var$gameScore.textContent = score;\n    const statuss = $09e991522ca7e64e$var$game.getStatus();\n    if (statuss === 'win') $09e991522ca7e64e$var$messageWin.classList.remove('hidden');\n    else if (statuss === 'lose') $09e991522ca7e64e$var$messageLose.classList.remove('hidden');\n}\nfunction $09e991522ca7e64e$var$restartGame() {\n    $09e991522ca7e64e$var$messageStart.classList.remove('hidden');\n    $09e991522ca7e64e$var$messageWin.classList.add('hidden');\n    $09e991522ca7e64e$var$messageLose.classList.add('hidden');\n    $09e991522ca7e64e$var$startButton.classList.add('start');\n    $09e991522ca7e64e$var$startButton.classList.remove('restart');\n    $09e991522ca7e64e$var$startButton.textContent = 'Start';\n    const initialState = $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$updateBoard(initialState);\n}\nfunction $09e991522ca7e64e$var$startGame() {\n    if ($09e991522ca7e64e$var$game.getStatus() === 'idle') {\n        const initialState = $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$startButton.textContent = 'Restart';\n        $09e991522ca7e64e$var$startButton.classList.add('restart');\n        $09e991522ca7e64e$var$startButton.classList.remove('start');\n        $09e991522ca7e64e$var$updateBoard(initialState);\n        $09e991522ca7e64e$var$messageStart.classList.add('hidden');\n        $09e991522ca7e64e$var$messageWin.classList.add('hidden');\n        $09e991522ca7e64e$var$messageLose.classList.add('hidden');\n        return;\n    }\n    if ($09e991522ca7e64e$var$game.getStatus() === 'playing') $09e991522ca7e64e$var$restartGame();\n}\n\n\n//# sourceMappingURL=index.b7d71f45.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\nconst gameScore = document.querySelector('.game-score');\nconst startButton = document.querySelector('.start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\nconst messageStart = document.querySelector('.message-start');\n\nconst fields = document.querySelectorAll('.field-cell');\n\ndocument.addEventListener('keydown', keypressHandler);\nstartButton.addEventListener('click', startGame);\n\nfunction keypressHandler(e) {\n  if (e.key === 'Escape') {\n    restartGame();\n  }\n\n  if (e.key === 'Enter') {\n    startGame();\n  }\n\n  if (game.getStatus() === 'playing') {\n    if (e.key === 'ArrowUp') {\n      updateBoard(game.moveUp());\n    }\n\n    if (e.key === 'ArrowDown') {\n      updateBoard(game.moveDown());\n    }\n\n    if (e.key === 'ArrowLeft') {\n      updateBoard(game.moveLeft());\n    }\n\n    if (e.key === 'ArrowRight') {\n      updateBoard(game.moveRight());\n    }\n  } else if (game.getStatus() === 'win') {\n    messageWin.classList.remove('hidden');\n    startButton.classList.add('start');\n    startButton.classList.remove('restart');\n    startButton.textContent = 'Start';\n  } else if (game.getStatus() === 'lose') {\n    messageLose.classList.remove('hidden');\n    startButton.classList.add('start');\n    startButton.classList.remove('restart');\n    startButton.textContent = 'Start';\n  }\n}\n\nfunction updateBoard(initialState) {\n  const gameValues = initialState.flat();\n\n  fields.forEach((field, index) => {\n    field.textContent = gameValues[index] || '';\n  });\n\n  const score = game.getScore();\n\n  gameScore.textContent = score;\n\n  const statuss = game.getStatus();\n\n  if (statuss === 'win') {\n    messageWin.classList.remove('hidden');\n  } else if (statuss === 'lose') {\n    messageLose.classList.remove('hidden');\n  }\n}\n\nfunction restartGame() {\n  messageStart.classList.remove('hidden');\n  messageWin.classList.add('hidden');\n  messageLose.classList.add('hidden');\n  startButton.classList.add('start');\n  startButton.classList.remove('restart');\n  startButton.textContent = 'Start';\n\n  const initialState = game.restart();\n\n  updateBoard(initialState);\n}\n\nfunction startGame() {\n  if (game.getStatus() === 'idle') {\n    const initialState = game.start();\n\n    startButton.textContent = 'Restart';\n    startButton.classList.add('restart');\n    startButton.classList.remove('start');\n\n    updateBoard(initialState);\n\n    messageStart.classList.add('hidden');\n    messageWin.classList.add('hidden');\n    messageLose.classList.add('hidden');\n\n    return;\n  }\n\n  if (game.getStatus() === 'playing') {\n    restartGame();\n  }\n}\n","/* eslint-disable no-console */\n/* eslint-disable function-paren-newline */\n'use strict';\n\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    // eslint-disable-next-line no-console\n    this.state = 'idle';\n    this.score = 0;\n    this.initialState = initialState;\n  }\n\n  moveLeft() {\n    if (this.state !== 'idle') {\n      const moveAllNonZeroToTheLeft = this.initialState.map((row) =>\n        mergeToTheLeft(row),\n      );\n\n      this.state = loseWinState(moveAllNonZeroToTheLeft);\n\n      this.score += calculateScore(this.initialState, moveAllNonZeroToTheLeft);\n\n      const newCellAdded = addNewCellRandomCell(moveAllNonZeroToTheLeft, 1);\n\n      this.initialState = newCellAdded;\n\n      return this.initialState;\n    }\n  }\n  moveRight() {\n    if (this.state !== 'idle') {\n      const moveAllNonZeroToTheRight = this.initialState.map((row) =>\n        mergeToTheRight(row),\n      );\n\n      this.state = loseWinState(moveAllNonZeroToTheRight);\n\n      this.score += calculateScore(this.initialState, moveAllNonZeroToTheRight);\n\n      const newCellAdded = addNewCellRandomCell(moveAllNonZeroToTheRight, 1);\n\n      this.initialState = newCellAdded;\n\n      return this.initialState;\n    }\n  }\n  moveUp() {\n    if (this.state !== 'idle') {\n      const moveAllNonZeroToTheUp = mergeUp(this.initialState);\n\n      this.state = loseWinState(moveAllNonZeroToTheUp);\n\n      this.score += calculateScore(this.initialState, moveAllNonZeroToTheUp);\n\n      const newCellAdded = addNewCellRandomCell(moveAllNonZeroToTheUp, 1);\n\n      this.initialState = newCellAdded;\n\n      return this.initialState;\n    }\n  }\n  moveDown() {\n    if (this.state !== 'idle') {\n      const moveAllNonZeroToTheDown = mergeDown(this.initialState);\n\n      this.score += calculateScore(this.initialState, moveAllNonZeroToTheDown);\n      this.state = loseWinState(moveAllNonZeroToTheDown);\n\n      const newCellAdded = addNewCellRandomCell(moveAllNonZeroToTheDown, 1);\n\n      this.initialState = newCellAdded;\n\n      return this.initialState;\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.initialState;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.state;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    const allInitialDateIsZero = this.initialState\n      .flat()\n      .every((value) => value === 0);\n\n    const returnToInitialArray = allInitialDateIsZero\n      ? addNewCellRandomCell(this.initialState, 2)\n      : addNewCellRandomCell(this.initialState, 1);\n\n    this.initialState = returnToInitialArray;\n    this.score = 0;\n    this.state = 'playing';\n\n    return this.initialState;\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.score = 0;\n    this.state = 'idle';\n\n    return this.initialState;\n  }\n\n  // Add your own methods here\n}\n\nfunction addNewCellRandomCell(initialState, qntOfRandomCellsToAdd) {\n  const flatGameInARow = initialState.flat();\n  const availableIndices = flatGameInARow\n    .map((value, i) => (value === 0 ? i : null))\n    .filter((value) => value !== null);\n\n  if (availableIndices.length === 0) {\n    return initialState;\n  }\n\n  for (let i = 0; i < qntOfRandomCellsToAdd; i++) {\n    if (availableIndices.length === 0) {\n      break;\n    }\n\n    const randomIndex = Math.floor(Math.random() * availableIndices.length);\n    const indexToAdd = availableIndices.splice(randomIndex, 1)[0];\n    const randomValue = Math.random() < 0.9 ? 2 : 4;\n\n    flatGameInARow[indexToAdd] = randomValue;\n  }\n\n  const returnToInitialArray = [];\n\n  while (flatGameInARow.length) {\n    returnToInitialArray.push(flatGameInARow.splice(0, 4));\n  }\n\n  return returnToInitialArray;\n}\n\nfunction mergeToTheLeft(result) {\n  for (let i = 0; i < result.length - 1; i++) {\n    if (result[i] === result[i + 1] && result[i] !== 0) {\n      result[i] *= 2;\n      result[i + 1] = 0;\n    }\n  }\n\n  const filtered = result.filter((num) => num !== 0);\n\n  while (filtered.length < result.length) {\n    filtered.push(0);\n  }\n\n  return filtered;\n}\n\nfunction mergeToTheRight(result) {\n  let nonZeroValues = result.filter((value) => value !== 0);\n\n  for (let i = nonZeroValues.length - 1; i > 0; i--) {\n    if (nonZeroValues[i] === nonZeroValues[i - 1]) {\n      nonZeroValues[i] *= 2;\n      nonZeroValues[i - 1] = 0;\n    }\n  }\n  // Remove zeros again after merging\n  nonZeroValues = nonZeroValues.filter((value) => value !== 0);\n\n  // Add zeros to the left to maintain the row length\n  while (nonZeroValues.length < result.length) {\n    nonZeroValues.unshift(0);\n  }\n\n  return nonZeroValues;\n}\n\nfunction mergeDown(initialState) {\n  const result = initialState.map((col) => [...col]);\n\n  for (let col = 0; col < result[0].length; col++) {\n    const column = result.map((row) => row[col]);\n\n    for (let i = column.length - 1; i > 0; i--) {\n      if (column[i] === column[i - 1] && column[i] !== 0) {\n        column[i] *= 2;\n        column[i - 1] = 0;\n      }\n    }\n\n    const filtered = column.filter((num) => num !== 0);\n\n    while (filtered.length < column.length) {\n      filtered.unshift(0);\n    }\n\n    for (let i = 0; i < result.length; i++) {\n      result[i][col] = filtered[i];\n    }\n  }\n\n  return result;\n}\n\nfunction mergeUp(initialState) {\n  const result = initialState.map((col) => [...col]);\n\n  for (let col = 0; col < result[0].length; col++) {\n    const column = result.map((row) => row[col]);\n\n    for (let i = 0; i < column.length - 1; i++) {\n      if (column[i] === column[i + 1] && column[i] !== 0) {\n        column[i] *= 2;\n        column[i + 1] = 0;\n      }\n    }\n\n    const filtered = column.filter((num) => num !== 0);\n\n    while (filtered.length < column.length) {\n      filtered.push(0);\n    }\n\n    for (let i = 0; i < result.length; i++) {\n      result[i][col] = filtered[i];\n    }\n  }\n\n  return result;\n}\n\nfunction checkIfWin(initialState) {\n  for (let i = 0; i < initialState.length; i++) {\n    for (let j = 0; j < initialState[i].length; j++) {\n      if (initialState[i][j] === 2048) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction checkIfLose(initialState) {\n  for (let i = 0; i < initialState.length; i++) {\n    for (let j = 0; j < initialState[i].length; j++) {\n      if (initialState[i][j] === 0) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction loseWinState(initialState) {\n  const lose = checkIfLose(initialState);\n  const win = checkIfWin(initialState);\n\n  if (lose) {\n    return 'lose';\n  }\n\n  if (win) {\n    return 'win';\n  }\n\n  return 'playing';\n}\n\nfunction calculateScore(initialState, finalState) {\n  let score = 0;\n\n  for (let i = 0; i < initialState.length; i++) {\n    for (let j = 0; j < initialState[i].length; j++) {\n      if (finalState[i][j] > initialState[i][j]) {\n        score += finalState[i][j];\n      }\n    }\n  }\n\n  return score;\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$var$addNewCellRandomCell","initialState","qntOfRandomCellsToAdd","flatGameInARow","flat","availableIndices","map","value","i","filter","length","randomIndex","Math","floor","random","indexToAdd","splice","randomValue","returnToInitialArray","push","$a5fd07fa01589658$var$loseWinState","lose","$a5fd07fa01589658$var$checkIfLose","j","win","$a5fd07fa01589658$var$checkIfWin","$a5fd07fa01589658$var$calculateScore","finalState","score","$09e991522ca7e64e$var$game","constructor","state","moveLeft","moveAllNonZeroToTheLeft","row","$a5fd07fa01589658$var$mergeToTheLeft","result","filtered","num","newCellAdded","moveRight","moveAllNonZeroToTheRight","$a5fd07fa01589658$var$mergeToTheRight","nonZeroValues","unshift","moveUp","moveAllNonZeroToTheUp","$a5fd07fa01589658$var$mergeUp","col","column","moveDown","moveAllNonZeroToTheDown","$a5fd07fa01589658$var$mergeDown","getScore","getState","getStatus","start","allInitialDateIsZero","every","restart","$09e991522ca7e64e$var$gameScore","document","querySelector","$09e991522ca7e64e$var$startButton","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$fields","querySelectorAll","$09e991522ca7e64e$var$updateBoard","gameValues","forEach","field","index","textContent","statuss","classList","remove","$09e991522ca7e64e$var$restartGame","add","$09e991522ca7e64e$var$startGame","addEventListener","e","key"],"version":3,"file":"index.b7d71f45.js.map"}